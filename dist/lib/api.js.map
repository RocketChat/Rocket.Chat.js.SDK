{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/lib/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { Client } from 'node-rest-client'\nimport * as settings from './settings'\nimport { logger } from './log'\nimport { IUserAPI } from '../utils/interfaces'\n\n/** Result object from an API login */\nexport interface ILoginResultAPI {\n  status: string // e.g. 'success'\n  data: { authToken: string, userId: string }\n}\n\n/** Structure for passing and keeping login credentials */\nexport interface ILoginCredentials {\n  username: string,\n  password: string\n}\nexport let currentLogin: {\n  username: string,\n  userId: string,\n  authToken: string,\n  result: ILoginResultAPI\n} | null = null\n\n/** Check for existing login */\nexport function loggedIn (): boolean {\n  return (currentLogin !== null)\n}\n\n/** Initialise client and configs */\nexport const client = new Client()\nexport const host = settings.host\n\n/**\n * Prepend protocol (or put back if removed from env settings for driver)\n * Hard code endpoint prefix, because all syntax depends on this version\n */\nexport const url = ((host.indexOf('http') === -1)\n  ? host.replace(/^(\\/\\/)?/, 'http://')\n  : host) + '/api/v1/'\n\n/** Convert payload data to query string for GET requests */\nexport function getQueryString (data: any) {\n  if (!data || typeof data !== 'object' || !Object.keys(data).length) return ''\n  return '?' + Object.keys(data).map((k) => {\n    const value = (typeof data[k] === 'object')\n      ? JSON.stringify(data[k])\n      : encodeURIComponent(data[k])\n    return `${encodeURIComponent(k)}=${value}`\n  }).join('&')\n}\n\n/** Setup default headers with empty auth for now */\nexport const basicHeaders = { 'Content-Type': 'application/json' }\nexport const authHeaders = { 'X-Auth-Token': '', 'X-User-Id': '' }\n\n/** Populate auth headers (from response data on login) */\nexport function setAuth (authData: {authToken: string, userId: string}) {\n  authHeaders['X-Auth-Token'] = authData.authToken\n  authHeaders['X-User-Id'] = authData.userId\n}\n\n/** Join basic headers with auth headers if required */\nexport function getHeaders (authRequired = false) {\n  if (!authRequired) return basicHeaders\n  if (\n    (!('X-Auth-Token' in authHeaders) || !('X-User-Id' in authHeaders)) ||\n    authHeaders['X-Auth-Token'] === '' ||\n    authHeaders['X-User-Id'] === ''\n  ) {\n    throw new Error('Auth required endpoint cannot be called before login')\n  }\n  return Object.assign({}, basicHeaders, authHeaders)\n}\n\n/** Clear headers so they can't be used without logging in again */\nexport function clearHeaders () {\n  delete authHeaders['X-Auth-Token']\n  delete authHeaders['X-User-Id']\n}\n\n/** Check result data for success, allowing override to ignore some errors */\nexport function success (result: any, ignore?: RegExp) {\n  return (\n    (\n      typeof result.error === 'undefined' &&\n      typeof result.status === 'undefined' &&\n      typeof result.success === 'undefined'\n    ) ||\n    (result.status && result.status === 'success') ||\n    (result.success && result.success === true) ||\n    (ignore && result.error && !ignore.test(result.error))\n  ) ? true : false\n}\n\n/**\n * Do a POST request to an API endpoint.\n * If it needs a token, login first (with defaults) to set auth headers.\n * @todo Look at why some errors return HTML (caught as buffer) instead of JSON\n * @param endpoint The API endpoint (including version) e.g. `chat.update`\n * @param data     Payload for POST request to endpoint\n * @param auth     Require auth headers for endpoint, default true\n * @param ignore   Allows certain matching error messages to not count as errors\n */\nexport async function post (\n  endpoint: string,\n  data: any,\n  auth: boolean = true,\n  ignore?: RegExp\n): Promise<any> {\n  try {\n    logger.debug(`[API] POST: ${endpoint}`, JSON.stringify(data))\n    if (auth && !loggedIn()) await login()\n    let headers = getHeaders(auth)\n    const result = await new Promise((resolve, reject) => {\n      client.post(url + endpoint, { headers, data }, (result: any) => {\n        if (Buffer.isBuffer(result)) reject('Result was buffer (HTML, not JSON)')\n        else if (!success(result, ignore)) reject(result)\n        else resolve(result)\n      }).on('error', (err: Error) => reject(err))\n    })\n    logger.debug('[API] POST result:', result)\n    return result\n  } catch (err) {\n    console.error(err)\n    logger.error(`[API] POST error (${endpoint}):`, err)\n  }\n}\n\n/**\n * Do a GET request to an API endpoint\n * @param endpoint   The API endpoint (including version) e.g. `users.info`\n * @param data       Object to serialise for GET request query string\n * @param auth       Require auth headers for endpoint, default true\n * @param ignore     Allows certain matching error messages to not count as errors\n */\nexport async function get (\n  endpoint: string,\n  data?: any,\n  auth: boolean = true,\n  ignore?: RegExp\n): Promise<any> {\n  try {\n    logger.debug(`[API] GET: ${endpoint}`, data)\n    if (auth && !loggedIn()) await login()\n    let headers = getHeaders(auth)\n    const query = getQueryString(data)\n    const result = await new Promise((resolve, reject) => {\n      client.get(url + endpoint + query, { headers }, (result: any) => {\n        if (Buffer.isBuffer(result)) reject('Result was buffer (HTML, not JSON)')\n        else if (!success(result, ignore)) reject(result)\n        else resolve(result)\n      }).on('error', (err: Error) => reject(err))\n    })\n    logger.debug('[API] GET result:', result)\n    return result\n  } catch (err) {\n    logger.error(`[API] GET error (${endpoint}):`, err)\n  }\n}\n\n/**\n * Login a user for further API calls\n * Result should come back with a token, to authorise following requests.\n * Use env default credentials, unless overridden by login arguments.\n */\nexport async function login (user: ILoginCredentials = {\n  username: settings.username,\n  password: settings.password\n}): Promise<ILoginResultAPI> {\n  logger.info(`[API] Logging in ${user.username}`)\n  if (currentLogin !== null) {\n    logger.debug(`[API] Already logged in`)\n    if (currentLogin.username === user.username) {\n      return currentLogin.result\n    } else {\n      await logout()\n    }\n  }\n  const result = await post('login', user, false)\n  if (result && result.data && result.data.authToken) {\n    currentLogin = {\n      result: result, // keep to return if login requested again for same user\n      username: user.username, // keep to compare with following login attempt\n      authToken: result.data.authToken,\n      userId: result.data.userId\n    }\n    setAuth(currentLogin)\n    logger.info(`[API] Logged in ID ${ currentLogin.userId }`)\n    return result\n  } else {\n    throw new Error(`[API] Login failed for ${user.username}`)\n  }\n}\n\n/** Logout a user at end of API calls */\nexport function logout () {\n  if (currentLogin === null) {\n    logger.debug(`[API] Already logged out`)\n    return Promise.resolve()\n  }\n  logger.info(`[API] Logging out ${ currentLogin.username }`)\n  return get('logout', null, true).then(() => {\n    clearHeaders()\n    currentLogin = null\n  })\n}\n\n/** Defaults for user queries */\nexport const userFields = { name: 1, username: 1, status: 1, type: 1 }\n\n/** Query helpers for user collection requests */\nexport const users: any = {\n  all: (fields: any = userFields) => get('users.list', { fields }).then((r) => r.users),\n  allNames: () => get('users.list', { fields: { 'username': 1 } }).then((r) => r.users.map((u: IUserAPI) => u.username)),\n  allIDs: () => get('users.list', { fields: { '_id': 1 } }).then((r) => r.users.map((u: IUserAPI) => u._id)),\n  online: (fields: any = userFields) => get('users.list', { fields, query: { 'status': { $ne: 'offline' } } }).then((r) => r.users),\n  onlineNames: () => get('users.list', { fields: { 'username': 1 }, query: { 'status': { $ne: 'offline' } } }).then((r) => r.users.map((u: IUserAPI) => u.username)),\n  onlineIds: () => get('users.list', { fields: { '_id': 1 }, query: { 'status': { $ne: 'offline' } } }).then((r) => r.users.map((u: IUserAPI) => u._id))\n}\n"]}