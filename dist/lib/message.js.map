{"version":3,"file":"message.js","sourceRoot":"","sources":["../../src/lib/message.ts"],"names":[],"mappings":";;AAMA;;;;;GAKG;AACH,MAAa,OAAO;IAClB,YAAa,OAA0B,EAAE,aAAqB;QAC5D,IAAI,OAAO,OAAO,KAAK,QAAQ;YAAE,IAAI,CAAC,GAAG,GAAG,OAAO,CAAA;;YAC9C,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;QACjC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,aAAa,EAAE,CAAA;IACjC,CAAC;IACD,SAAS,CAAE,MAAc;QACvB,IAAI,CAAC,GAAG,GAAG,MAAM,CAAA;QACjB,OAAO,IAAI,CAAA;IACb,CAAC;CACF;AAVD,0BAUC","sourcesContent":["import { IMessage } from '../config/messageInterfaces'\n\n// Message class declaration implicitly implements interface\n// https://github.com/Microsoft/TypeScript/issues/340\nexport interface Message extends IMessage {}\n\n/**\n * Rocket.Chat message class.\n * Sets integration param to allow tracing source of automated sends.\n * @param content Accepts message text or a preformed message object\n * @todo Potential for SDK usage that isn't bots, bot prop should be optional?\n */\nexport class Message {\n  constructor (content: string | IMessage, integrationId: string) {\n    if (typeof content === 'string') this.msg = content\n    else Object.assign(this, content)\n    this.bot = { i: integrationId }\n  }\n  setRoomId (roomId: string): Message {\n    this.rid = roomId\n    return this\n  }\n}\n"]}