{"version":3,"file":"driver.js","sourceRoot":"","sources":["../../src/lib/driver.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\nimport Asteroid from 'asteroid'\nimport * as settings from './settings'\nimport * as methodCache from './methodCache'\nimport { Message } from './message'\nimport {\n  IConnectOptions,\n  IRespondOptions,\n  ICallback,\n  ILogger\n} from '../config/driverInterfaces'\nimport {\n  IAsteroid,\n  ICredentials,\n  ISubscription,\n  ICollection\n} from '../config/asteroidInterfaces'\nimport { IMessage } from '../config/messageInterfaces'\nimport { logger, replaceLog } from './log'\nimport { IMessageReceiptAPI } from '../utils/interfaces'\n\n/** Collection names */\nconst _messageCollectionName = 'stream-room-messages'\nconst _messageStreamName = '__my_messages__'\n\n// CONNECTION SETUP AND CONFIGURE\n// -----------------------------------------------------------------------------\n\n/** Internal for comparing message update timestamps */\nexport let lastReadTime: Date\n\n/**\n * The integration property is applied as an ID on sent messages `bot.i` param\n * Should be replaced when connection is invoked by a package using the SDK\n * e.g. The Hubot adapter would pass its integration ID with credentials, like:\n */\nexport const integrationId = settings.integrationId\n\n/**\n * Event Emitter for listening to connection.\n * @example\n *  import { driver } from '@rocket.chat/sdk'\n *  driver.connect()\n *  driver.events.on('connected', () => console.log('driver connected'))\n */\nexport const events = new EventEmitter()\n\n/**\n * An Asteroid instance for interacting with Rocket.Chat.\n * Variable not initialised until `connect` called.\n */\nexport let asteroid: IAsteroid\n\n/**\n * Asteroid subscriptions, exported for direct polling by adapters\n * Variable not initialised until `prepMeteorSubscriptions` called.\n */\nexport let subscriptions: ISubscription[] = []\n\n/**\n * Current user object populated from resolved login\n */\nexport let userId: string\n\n/**\n * Array of joined room IDs (for reactive queries)\n */\nexport let joinedIds: string[] = []\n\n/**\n * Array of messages received from reactive collection\n */\nexport let messages: ICollection\n\n/**\n * Allow override of default logging with adapter's log instance\n */\nexport function useLog (externalLog: ILogger) {\n  replaceLog(externalLog)\n}\n\n/**\n * Initialise asteroid instance with given options or defaults.\n * Returns promise, resolved with Asteroid instance. Callback follows\n * error-first-pattern. Error returned or promise rejected on timeout.\n * Removes http/s protocol to get connection hostname if taken from URL.\n * @example <caption>Use with callback</caption>\n *  import { driver } from '@rocket.chat/sdk'\n *  driver.connect({}, (err) => {\n *    if (err) throw err\n *    else console.log('connected')\n *  })\n * @example <caption>Using promise</caption>\n *  import { driver } from '@rocket.chat/sdk'\n *  driver.connect()\n *    .then(() => console.log('connected'))\n *    .catch((err) => console.error(err))\n */\nexport function connect (\n  options: IConnectOptions = {},\n  callback?: ICallback\n): Promise<IAsteroid> {\n  return new Promise((resolve, reject) => {\n    const config = Object.assign({}, settings, options) // override defaults\n    config.host = config.host.replace(/(^\\w+:|^)\\/\\//, '')\n    logger.info('[connect] Connecting', config)\n    asteroid = new Asteroid(config.host, config.useSsl)\n\n    setupMethodCache(asteroid) // init instance for later caching method calls\n    asteroid.on('connected', () => {\n      asteroid.resumeLoginPromise.catch(function () {\n        // pass\n      })\n      events.emit('connected')\n    })\n    asteroid.on('reconnected', () => events.emit('reconnected'))\n    let cancelled = false\n    const rejectionTimeout = setTimeout(function () {\n      logger.info(`[connect] Timeout (${config.timeout})`)\n      const err = new Error('Asteroid connection timeout')\n      cancelled = true\n      events.removeAllListeners('connected')\n      callback ? callback(err, asteroid) : reject(err)\n    }, config.timeout)\n\n    // if to avoid condition where timeout happens before listener to 'connected' is added\n    // and this listener is not removed (because it was added after the removal)\n    if (!cancelled) {\n      events.once('connected', () => {\n        logger.info('[connect] Connected')\n        // if (cancelled) return asteroid.ddp.disconnect() // cancel if already rejected\n        clearTimeout(rejectionTimeout)\n        if (callback) callback(null, asteroid)\n        resolve(asteroid)\n      })\n    }\n  })\n}\n\n/** Remove all active subscriptions, logout and disconnect from Rocket.Chat */\nexport function disconnect (): Promise<void> {\n  logger.info('Unsubscribing, logging out, disconnecting')\n  unsubscribeAll()\n  return logout()\n    .then(() => Promise.resolve())\n}\n\n// ASYNC AND CACHE METHOD UTILS\n// -----------------------------------------------------------------------------\n\n/**\n * Setup method cache configs from env or defaults, before they are called.\n * @param asteroid The asteroid instance to cache method calls\n */\nfunction setupMethodCache (asteroid: IAsteroid): void {\n  methodCache.use(asteroid)\n  methodCache.create('getRoomIdByNameOrId', {\n    max: settings.roomCacheMaxSize,\n    maxAge: settings.roomCacheMaxAge\n  }),\n  methodCache.create('getRoomNameById', {\n    max: settings.roomCacheMaxSize,\n    maxAge: settings.roomCacheMaxAge\n  })\n  methodCache.create('createDirectMessage', {\n    max: settings.dmCacheMaxSize,\n    maxAge: settings.dmCacheMaxAge\n  })\n}\n\n/**\n * Wraps method calls to ensure they return a Promise with caught exceptions.\n * @param method The Rocket.Chat server method, to call through Asteroid\n * @param params Single or array of parameters of the method to call\n */\nexport function asyncCall (method: string, params: any | any[]): Promise<any> {\n  if (!Array.isArray(params)) params = [params] // cast to array for apply\n  logger.info(`[${method}] Calling (async): ${JSON.stringify(params)}`)\n  return Promise.resolve(asteroid.apply(method, params).result)\n    .catch((err: Error) => {\n      logger.error(`[${method}] Error:`, err)\n      throw err // throw after log to stop async chain\n    })\n    .then((result: any) => {\n      (result)\n        ? logger.debug(`[${method}] Success: ${JSON.stringify(result)}`)\n        : logger.debug(`[${method}] Success`)\n      return result\n    })\n}\n\n/**\n * Call a method as async via Asteroid, or through cache if one is created.\n * If the method doesn't have or need parameters, it can't use them for caching\n * so it will always call asynchronously.\n * @param name The Rocket.Chat server method to call\n * @param params Single or array of parameters of the method to call\n */\nexport function callMethod (name: string, params?: any | any[]): Promise<any> {\n  return (methodCache.has(name) || typeof params === 'undefined')\n    ? asyncCall(name, params)\n    : cacheCall(name, params)\n}\n\n/**\n * Wraps Asteroid method calls, passed through method cache if cache is valid.\n * @param method The Rocket.Chat server method, to call through Asteroid\n * @param key Single string parameters only, required to use as cache key\n */\nexport function cacheCall (method: string, key: string): Promise<any> {\n  return methodCache.call(method, key)\n    .catch((err: Error) => {\n      logger.error(`[${method}] Error:`, err)\n      throw err // throw after log to stop async chain\n    })\n    .then((result: any) => {\n      (result)\n        ? logger.debug(`[${method}] Success: ${JSON.stringify(result)}`)\n        : logger.debug(`[${method}] Success`)\n      return result\n    })\n}\n\n// LOGIN AND SUBSCRIBE TO ROOMS\n// -----------------------------------------------------------------------------\n\n/** Login to Rocket.Chat via Asteroid */\nexport function login (credentials: ICredentials = {\n  username: settings.username,\n  password: settings.password,\n  ldap: settings.ldap\n}): Promise<any> {\n  let login: Promise<any>\n  // if (credentials.ldap) {\n  //   logger.info(`[login] Logging in ${credentials.username} with LDAP`)\n  //   login = asteroid.loginWithLDAP(\n  //     credentials.email || credentials.username,\n  //     credentials.password,\n  //     { ldap: true, ldapOptions: credentials.ldapOptions || {} }\n  //   )\n  // } else {\n  logger.info(`[login] Logging in ${credentials.username}`)\n  login = asteroid.loginWithPassword(\n    credentials.email || credentials.username!,\n    credentials.password\n  )\n  // }\n  return login\n    .then((loggedInUserId) => {\n      userId = loggedInUserId\n      return loggedInUserId\n    })\n    .catch((err: Error) => {\n      logger.info('[login] Error:', err)\n      throw err // throw after log to stop async chain\n    })\n}\n\n/** Logout of Rocket.Chat via Asteroid */\nexport function logout (): Promise<void | null> {\n  return asteroid.logout()\n    .catch((err: Error) => {\n      logger.error('[Logout] Error:', err)\n      throw err // throw after log to stop async chain\n    })\n}\n\n/**\n * Subscribe to Meteor subscription\n * Resolves with subscription (added to array), with ID property\n * @todo - 3rd param of asteroid.subscribe is deprecated in Rocket.Chat?\n */\nexport function subscribe (\n  topic: string,\n  roomId: string\n): Promise<ISubscription> {\n  return new Promise((resolve, reject) => {\n    logger.info(`[subscribe] Preparing subscription: ${topic}: ${roomId}`)\n    const subscription = asteroid.subscribe(topic, roomId, true)\n    subscriptions.push(subscription)\n    return subscription.ready\n      .then((id) => {\n        logger.info(`[subscribe] Stream ready: ${id}`)\n        resolve(subscription)\n      })\n  })\n}\n\n/** Unsubscribe from Meteor subscription */\nexport function unsubscribe (subscription: ISubscription): void {\n  const index = subscriptions.indexOf(subscription)\n  if (index === -1) return\n  subscription.stop()\n  // asteroid.unsubscribe(subscription.id) // v2\n  subscriptions.splice(index, 1) // remove from collection\n  logger.info(`[${subscription.id}] Unsubscribed`)\n}\n\n/** Unsubscribe from all subscriptions in collection */\nexport function unsubscribeAll (): void {\n  subscriptions.map((s: ISubscription) => unsubscribe(s))\n}\n\n/**\n * Begin subscription to room events for user.\n * Older adapters used an option for this method but it was always the default.\n */\nexport function subscribeToMessages (): Promise<ISubscription> {\n  return subscribe(_messageCollectionName, _messageStreamName)\n    .then((subscription) => {\n      messages = asteroid.getCollection(_messageCollectionName)\n      return subscription\n    })\n}\n\n/**\n * Once a subscription is created, using `subscribeToMessages` this method\n * can be used to attach a callback to changes in the message stream.\n * This can be called directly for custom extensions, but for most usage (e.g.\n * for bots) the respondToMessages is more useful to only receive messages\n * matching configuration.\n *\n * If the bot hasn't been joined to any rooms at this point, it will attempt to\n * join now based on environment config, otherwise it might not receive any\n * messages. It doesn't matter that this happens asynchronously because the\n * bot's joined rooms can change after the reactive query is set up.\n *\n * @todo `reactToMessages` should call `subscribeToMessages` if not already\n *       done, so it's not required as an arbitrary step for simpler adapters.\n *       Also make `login` call `connect` for the same reason, the way\n *       `respondToMessages` calls `respondToMessages`, so all that's really\n *       required is:\n *       `driver.login(credentials).then(() => driver.respondToMessages(callback))`\n * @param callback Function called with every change in subscriptions.\n *  - Uses error-first callback pattern\n *  - Second argument is the changed item\n *  - Third argument is additional attributes, such as `roomType`\n */\nexport function reactToMessages (callback: ICallback): void {\n  logger.info(`[reactive] Listening for change events in collection ${messages.name}`)\n\n  messages.reactiveQuery({}).on('change', (_id: string) => {\n    const changedMessageQuery = messages.reactiveQuery({ _id })\n    if (changedMessageQuery.result && changedMessageQuery.result.length > 0) {\n      const changedMessage = changedMessageQuery.result[0]\n      if (Array.isArray(changedMessage.args)) {\n        logger.info(`[received] Message in room ${ changedMessage.args[0].rid }`)\n        callback(null, changedMessage.args[0], changedMessage.args[1])\n      } else {\n        logger.debug('[received] Update without message args')\n      }\n    } else {\n      logger.debug('[received] Reactive query at ID ${ _id } without results')\n    }\n  })\n}\n\n/**\n * Proxy for `reactToMessages` with some filtering of messages based on config.\n *\n * @param callback Function called after filters run on subscription events.\n *  - Uses error-first callback pattern\n *  - Second argument is the changed item\n *  - Third argument is additional attributes, such as `roomType`\n * @param options Sets filters for different event/message types.\n */\nexport function respondToMessages (\n  callback: ICallback,\n  options: IRespondOptions = {}\n): Promise<void | void[]> {\n  const config = Object.assign({}, settings, options)\n  // return value, may be replaced by async ops\n  let promise: Promise<void | void[]> = Promise.resolve()\n\n  // Join configured rooms if they haven't been already, unless listening to all\n  // public rooms, in which case it doesn't matter\n  if (\n    !config.allPublic &&\n    joinedIds.length === 0 &&\n    config.rooms &&\n    config.rooms.length > 0\n  ) {\n    promise = joinRooms(config.rooms)\n      .catch((err) => {\n        logger.error(`[joinRooms] Failed to join configured rooms (${config.rooms.join(', ')}): ${err.message}`)\n      })\n  }\n\n  lastReadTime = new Date() // init before any message read\n  reactToMessages(async (err, message, meta) => {\n    if (err) {\n      logger.error(`[received] Unable to receive: ${err.message}`)\n      callback(err) // bubble errors back to adapter\n    }\n\n    // Ignore bot's own messages\n    if (message.u._id === userId) return\n\n    // Ignore DMs unless configured not to\n    const isDM = meta.roomType === 'd'\n    if (isDM && !config.dm) return\n\n    // Ignore Livechat unless configured not to\n    const isLC = meta.roomType === 'l'\n    if (isLC && !config.livechat) return\n\n    // Ignore messages in un-joined public rooms unless configured not to\n    if (!config.allPublic && !isDM && !meta.roomParticipant) return\n\n    // Set current time for comparison to incoming\n    let currentReadTime = new Date(message.ts.$date)\n\n    // Ignore edited messages if configured to\n    if (!config.edited && message.editedAt) return\n\n    // Set read time as time of edit, if message is edited\n    if (message.editedAt) currentReadTime = new Date(message.editedAt.$date)\n\n    // Ignore messages in stream that aren't new\n    if (currentReadTime <= lastReadTime) return\n\n    // At this point, message has passed checks and can be responded to\n    logger.info(`[received] Message ${message._id} from ${message.u.username}`)\n    lastReadTime = currentReadTime\n\n    // Processing completed, call callback to respond to message\n    callback(null, message, meta)\n  })\n  return promise\n}\n\n// PREPARE AND SEND MESSAGES\n// -----------------------------------------------------------------------------\n\n/** Get ID for a room by name (or ID). */\nexport function getRoomId (name: string): Promise<string> {\n  return cacheCall('getRoomIdByNameOrId', name)\n}\n\n/** Get name for a room by ID. */\nexport function getRoomName (id: string): Promise<string> {\n  return cacheCall('getRoomNameById', id)\n}\n\n/**\n * Get ID for a DM room by its recipient's name.\n * Will create a DM (with the bot) if it doesn't exist already.\n * @todo test why create resolves with object instead of simply ID\n */\nexport function getDirectMessageRoomId (username: string): Promise<string> {\n  return cacheCall('createDirectMessage', username)\n    .then((DM) => DM.rid)\n}\n\n/** Join the bot into a room by its name or ID */\nexport async function joinRoom (room: string): Promise<void> {\n  let roomId = await getRoomId(room)\n  let joinedIndex = joinedIds.indexOf(room)\n  if (joinedIndex !== -1) {\n    logger.error(`[joinRoom] room was already joined`)\n  } else {\n    await asyncCall('joinRoom', roomId)\n    joinedIds.push(roomId)\n  }\n}\n\n/** Exit a room the bot has joined */\nexport async function leaveRoom (room: string): Promise<void> {\n  let roomId = await getRoomId(room)\n  let joinedIndex = joinedIds.indexOf(room)\n  if (joinedIndex === -1) {\n    logger.error(`[leaveRoom] failed because bot has not joined ${room}`)\n  } else {\n    await asyncCall('leaveRoom', roomId)\n    delete joinedIds[joinedIndex]\n  }\n}\n\n/** Join a set of rooms by array of names or IDs */\nexport function joinRooms (rooms: string[]): Promise<void[]> {\n  return Promise.all(rooms.map((room) => joinRoom(room)))\n}\n\n/**\n * Structure message content, optionally addressing to room ID.\n * Accepts message text string or a structured message object.\n */\nexport function prepareMessage (\n  content: string | IMessage,\n  roomId?: string\n): Message {\n  const message = new Message(content, integrationId)\n  if (roomId) message.setRoomId(roomId)\n  return message\n}\n\n/**\n * Send a prepared message object (with pre-defined room ID).\n * Usually prepared and called by sendMessageByRoomId or sendMessageByRoom.\n */\nexport function sendMessage (message: IMessage): Promise<IMessageReceiptAPI> {\n  return asyncCall('sendMessage', message)\n}\n\n/**\n * Prepare and send string/s to specified room ID.\n * @param content Accepts message text string or array of strings.\n * @param roomId  ID of the target room to use in send.\n * @todo Returning one or many gets complicated with type checking not allowing\n *       use of a property because result may be array, when you know it's not.\n *       Solution would probably be to always return an array, even for single\n *       send. This would be a breaking change, should hold until major version.\n */\nexport function sendToRoomId (\n  content: string | string[] | IMessage,\n  roomId: string\n): Promise<IMessageReceiptAPI[] | IMessageReceiptAPI> {\n  if (!Array.isArray(content)) {\n    return sendMessage(prepareMessage(content, roomId))\n  } else {\n    return Promise.all(content.map((text) => {\n      return sendMessage(prepareMessage(text, roomId))\n    }))\n  }\n}\n\n/**\n * Prepare and send string/s to specified room name (or ID).\n * @param content Accepts message text string or array of strings.\n * @param room    A name (or ID) to resolve as ID to use in send.\n */\nexport function sendToRoom (\n  content: string | string[] | IMessage,\n  room: string\n): Promise<IMessageReceiptAPI[] | IMessageReceiptAPI> {\n  return getRoomId(room)\n    .then((roomId) => sendToRoomId(content, roomId))\n}\n\n/**\n * Prepare and send string/s to a user in a DM.\n * @param content   Accepts message text string or array of strings.\n * @param username  Name to create (or get) DM for room ID to use in send.\n */\nexport function sendDirectToUser (\n  content: string | string[] | IMessage,\n  username: string\n): Promise<IMessageReceiptAPI[] | IMessageReceiptAPI> {\n  return getDirectMessageRoomId(username)\n    .then((rid) => sendToRoomId(content, rid))\n}\n\n/**\n * Edit an existing message, replacing any attributes with those provided.\n * The given message object should have the ID of an existing message.\n */\nexport function editMessage (message: IMessage): Promise<IMessage> {\n  return asyncCall('updateMessage', message)\n}\n\n/**\n * Send a reaction to an existing message. Simple proxy for method call.\n * @param emoji     Accepts string like `:thumbsup:` to add 👍 reaction\n * @param messageId ID for a previously sent message\n */\nexport function setReaction (emoji: string, messageId: string) {\n  return asyncCall('setReaction', [emoji, messageId])\n}\n"]}